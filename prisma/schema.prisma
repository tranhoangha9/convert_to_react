// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model Category {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(100)
  description String?  @db.Text
  image       String?  @db.VarChar(500)
  isActive    Boolean  @default(true)
  products    Product[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("Categories")
}

model Product {
  id              Int         @id @default(autoincrement())
  name            String      @db.VarChar(255)
  price           Decimal     @db.Decimal(10, 2)
  originalPrice   Decimal?    @db.Decimal(10, 2)
  description     String?     @db.Text
  shortDescription String?    @db.VarChar(500)
  image           String?     @db.VarChar(500)
  images          String?     @db.Text // JSON array of images
  sku             String?     @unique @db.VarChar(100)
  stock           Int         @default(0)
  categoryId      Int?
  category        Category?   @relation(fields: [categoryId], references: [id])
  isActive        Boolean     @default(true)
  isFeatured      Boolean     @default(false)
  orderItems      OrderItem[] // Thêm dòng này
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  @@map("Products")
}

model User {
  id        Int     @id @default(autoincrement())
  email     String  @unique @db.VarChar(255)
  name      String  @db.VarChar(255)
  password  String  @db.VarChar(255)
  phone     String? @db.VarChar(20)
  address   String? @db.Text
  avatar    String? @db.NVarChar(MAX)
  role      String  @default("user") @db.VarChar(50)
  isActive  Boolean @default(true)
  orders    Order[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("Users")
}

model Order {
  id               Int         @id @default(autoincrement())
  userId           Int?
  user             User?       @relation(fields: [userId], references: [id])
  totalAmount      Decimal     @db.Decimal(10, 2)
  status           String      @default("pending") @db.VarChar(50)
  shippingAddress  String?     @db.Text
  notes            String?     @db.Text
  orderItems       OrderItem[]
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt

  @@map("Orders")
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  order     Order   @relation(fields: [orderId], references: [id])
  productId Int
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
  price     Decimal @db.Decimal(10, 2)
  createdAt DateTime @default(now())

  @@map("OrderItems")
}