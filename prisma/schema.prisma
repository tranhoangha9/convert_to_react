generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(100)
  description String?   @db.Text
  image       String?   @db.VarChar(500)
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]

  @@map("Categories")
}

model Discount {
  id        Int      @id @default(autoincrement())
  code      String   @unique @db.VarChar(50)
  name      String   @db.VarChar(255)
  value     Decimal  @db.Decimal(10, 2)
  isActive  Boolean  @default(true)
  orders    Order[]

  @@map("Discounts")
}

model Product {
  id               Int         @id @default(autoincrement())
  name             String      @db.VarChar(255)
  price            Decimal     @db.Decimal(10, 2)
  originalPrice    Decimal?    @db.Decimal(10, 2)
  description      String?     @db.Text
  shortDescription String?     @db.VarChar(500)
  image            String?     @db.VarChar(500)
  sku              String?     @unique @db.VarChar(100)
  stock            Int         @default(0)
  categoryId       Int?
  isActive         Boolean     @default(true)
  isFeatured       Boolean     @default(false)
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  orderItems       OrderItem[]
  cartItems        CartItem[]
  category         Category?   @relation(fields: [categoryId], references: [id])

  @@map("Products")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique @db.VarChar(255)
  name      String   @db.VarChar(255)
  password  String   @db.VarChar(255)
  phone     String?  @db.VarChar(20)
  address   String?  @db.Text
  role      String   @default("user") @db.VarChar(50)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  avatar    String?  @db.NVarChar(Max)
  cart      Cart?
  orders    Order[]

  @@map("Users")
}

model Order {
  id              Int         @id @default(autoincrement())
  userId          Int?
  totalAmount     Decimal     @db.Decimal(10, 2)
  discountId      Int?        // Liên kết với bảng Discounts
  status          String      @default("pending") @db.VarChar(50)
  paymentMethod   String?     @db.VarChar(50)
  customerInfo    String?     @db.Text
  paymentInfo     String?     @db.Text
  shippingAddress String?     @db.Text
  notes           String?     @db.Text
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  orderItems      OrderItem[]
  user            User?       @relation(fields: [userId], references: [id])
  discount        Discount?   @relation(fields: [discountId], references: [id])

  @@map("Orders")
}

model Cart {
  id        Int        @id @default(autoincrement())
  userId    Int        @unique
  createdAt DateTime   @default(now(), map: "DF__Cart__createdAt__02FC7413")
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id])
  items     CartItem[]

  @@map("Cart")
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  price     Decimal  @db.Decimal(10, 2)
  createdAt DateTime @default(now())
  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@map("OrderItems")
}

model CartItem {
  id        Int      @id @default(autoincrement())
  cartId    Int
  productId Int
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id])

  @@map("CartItem")
}
